/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aps.frame;

import aps.bean.ChatMessage;
import aps.bean.ChatMessage.Action;
import aps.service.ClienteService;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.nio.channels.FileChannel;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author rodrigo_cichetto
 */
// Janela exibida para o cliente
public class ClienteFrame extends javax.swing.JFrame {
    // Socket para conexão
    private Socket socket;
    // Objeto mensagem
    private ChatMessage message;
    // Ações do cliente
    private ClienteService service;

    /**
     * Creates new form ClienteFrame
     */
    public ClienteFrame() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        btnSair = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();
        lblNome = new javax.swing.JLabel();
        txtIp = new javax.swing.JTextField();
        txtPorta = new javax.swing.JTextField();
        lblIp = new javax.swing.JLabel();
        lblPorta = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listOnlines = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaRecieve = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaSend = new javax.swing.JTextArea();
        btnEnviar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnArquivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Conectar"));

        btnSair.setText("Sair");
        btnSair.setEnabled(false);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        lblNome.setText("Nome");

        txtIp.setFocusable(false);

        txtPorta.setFocusable(false);

        lblIp.setText("Ip");

        lblPorta.setText("Porta");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIp, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConectar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNome)
                            .addComponent(lblIp))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPorta)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtPorta)
                        .addComponent(btnSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIp)
                    .addComponent(lblPorta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair)
                    .addComponent(btnConectar)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Onlines"));

        jScrollPane3.setViewportView(listOnlines);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtAreaRecieve.setEditable(false);
        txtAreaRecieve.setColumns(20);
        txtAreaRecieve.setRows(5);
        txtAreaRecieve.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaRecieve);

        txtAreaSend.setColumns(20);
        txtAreaSend.setRows(5);
        txtAreaSend.setEnabled(false);
        jScrollPane2.setViewportView(txtAreaSend);

        btnEnviar.setText("Enviar");
        btnEnviar.setEnabled(false);
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.setEnabled(false);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnArquivo.setText("Selecionar arquivo");
        btnArquivo.setEnabled(false);
        btnArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnArquivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviar)
                    .addComponent(btnLimpar)
                    .addComponent(btnArquivo))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        String name = this.txtName.getText();

        // Verifica se o campo nome está vazio
        if (!name.isEmpty()) {
            // Seta as informações para conexão definindo a ação CONNECT
            this.message = new ChatMessage();
            this.message.setAction(Action.CONNECT);
            this.message.setName(name);

            this.service = new ClienteService();
            // Tenta abrir uma conexão com o servidor
            try {
                // Verifica se tem algum IP e Porta preenchidos nos campos, caso não conecta no ip e porta padrão
                if ((!this.txtIp.getText().isEmpty()) && (!this.txtPorta.getText().isEmpty())) {
                    this.socket = this.service.connect(this.txtIp.getText(), Integer.parseInt(this.txtPorta.getText()));
                } else {
                    this.socket = this.service.connect();
                    this.txtIp.setText("localhost");
                    this.txtPorta.setText("5555");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Não foi possível conectar ao servidor!");
            }
            // Inicia a Thread de conexão
            new Thread(new ListenerSocket(this.socket)).start();
            
            try {
                // Envia a mensagem ao servidor
                this.service.send(message);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao enviar mensagem! O servidor pode estar offline.");
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // Seta a ação DISCONNECT para a mensagem
        this.message.setAction(Action.DISCONNECT);
        try {
            // Envia a informação para o servidor
            this.service.send(message);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao enviar mensagem! O servidor pode estar offline.");
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Configurações visuais de hab./desab. campos e botões
        disconnected();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // Pega as informações preenchidas nos campos
        String text = this.txtAreaSend.getText();
        String name = this.message.getName();
        // Cria uma nova mensagem
        this.message = new ChatMessage();

        // Verifica se a mensagem será enviada para apenas uma pessoa ou para todos
        if (this.listOnlines.getSelectedIndex() > -1) {
            this.message.setNameReserved((String) this.listOnlines.getSelectedValue());
            this.message.setAction(Action.SEND_ONE);
            this.listOnlines.clearSelection();
        } else {
            this.message.setAction(Action.SEND_ALL);
        }

        // Verifica se o texto está vazio
        if (!text.isEmpty()) {
            // Seta informações da mensagem
            this.message.setName(name);
            this.message.setText(text);
            // Coloca texto enviado na view do próprio remetente
            this.txtAreaRecieve.append(name + ": " + text + "\n");

            try {
                // Envia a mensagem
                this.service.send(this.message);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao enviar mensagem! O servidor pode estar offline.");
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // Limpa o textarea
        this.txtAreaSend.setText("");

    }//GEN-LAST:event_btnEnviarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // Limpa o textarea
        this.txtAreaSend.setText("");
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoActionPerformed
        
        try {
            // Cria a janela para escolher o arquivo a ser enviado
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setDialogTitle("Escolha o arquivo");
            // Caso NÃO clique em cancelar, ou seja, escolha um arquivo
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                // Pega o arquivo selecionado
                File fileSelected = chooser.getSelectedFile();
                // Informações da mensagem setando o arquivo a ser enviado
                String name = this.message.getName();
                this.message = new ChatMessage();
                message.setFile(fileSelected);
                // Verifica se a mensagem será enviada para apenas uma pessoa ou para todos
                if (this.listOnlines.getSelectedIndex() > -1) {
                    this.message.setNameReserved((String) this.listOnlines.getSelectedValue());
                    this.message.setAction(Action.SEND_ONE);
                    this.listOnlines.clearSelection();
                } else {
                    this.message.setAction(Action.SEND_ALL);
                }
                
                message.setName(name);
                // Envia a mensagem
                this.service.send(this.message);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnArquivoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArquivo;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSair;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblIp;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPorta;
    private javax.swing.JList<String> listOnlines;
    private javax.swing.JTextArea txtAreaRecieve;
    private javax.swing.JTextArea txtAreaSend;
    private javax.swing.JTextField txtIp;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPorta;
    // End of variables declaration//GEN-END:variables

    private class ListenerSocket implements Runnable {
        // Classe que conversa com o servidor
        
        // Atributos
        private ObjectInputStream input;

        public ListenerSocket(Socket socket) {
            try {
                this.input = new ObjectInputStream(socket.getInputStream());
            } catch (IOException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            ChatMessage message = null;

            try {
                while ((message = (ChatMessage) input.readObject()) != null) {
                    // Pega a ação da mensagem e filtra para o metodo responsável
                    Action action = message.getAction();
                    if (action.equals(Action.CONNECT)) {
                        connected(message);
                    } else if (action.equals(Action.DISCONNECT)) {
                        disconnected();
                        socket.close();
                    } else if (action.equals(Action.SEND_ONE)) {
                        recieve(message);
                    } else if (action.equals(Action.USERS_ONLINE)) {
                        refreshOnlines(message);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void connected(ChatMessage message) {
        // Verifica se a conexão foi realizada
        if (message.getText().equals("NO")) {
            this.txtName.setText("");
            JOptionPane.showMessageDialog(this, "Conexão não realizada! \n Tente novamente com um novo nome.");
            return;
        }
        // Recebe a mensagem
        this.message = message;
        // Detalhes gráficos, ao se conectar habilita alguns botões e desabilita outros
        this.setTitle("Chat - " + this.txtName.getText());
        this.btnConectar.setEnabled(false);
        this.txtName.setEnabled(false);
        this.txtIp.setEnabled(false);
        this.txtPorta.setEnabled(false);

        this.btnSair.setEnabled(true);
        this.txtAreaSend.setEnabled(true);
        this.txtAreaRecieve.setEditable(true);
        this.btnEnviar.setEnabled(true);
        this.btnLimpar.setEnabled(true);
        this.btnArquivo.setEnabled(true);

        JOptionPane.showMessageDialog(this, "Você está conectado no chat.");
    }

    private void disconnected() {
        // Detalhes gráficos, ao se desconectar desabilita alguns botões e habilita outros
        this.setTitle("Chat");
        
        this.btnConectar.setEnabled(true);
        this.txtName.setEnabled(true);
        this.txtIp.setEnabled(true);
        this.txtPorta.setEnabled(true);

        this.btnSair.setEnabled(false);
        this.txtAreaSend.setEnabled(false);
        this.txtAreaRecieve.setEditable(false);
        this.btnEnviar.setEnabled(false);
        this.btnLimpar.setEnabled(false);
        this.btnArquivo.setEnabled(false);

        this.txtAreaRecieve.setText("");
        this.txtAreaSend.setText("");

        JOptionPane.showMessageDialog(this, "Você saiu do chat.");
    }

    private void recieve(ChatMessage message) {
        // Verifica se a mensagem possui um arquivo
        if (message.getFile() != null) {
            // Informa para os outros usuários que foi recebido um arquivo e o salva na mesma pasta do Cliente.jar 
            this.txtAreaRecieve.append(message.getName() + " enviou um arquivo. \n");
            salvar(message.getFile());
            // Caso .txt e queira imprimir o conteúdo do arquivo
            // imprime(message.getFile());
        } else {
            // Imprime texto enviado na mensagem
            this.txtAreaRecieve.append(message.getName() + ": " + message.getText() + "\n");
        }
    }
    
    private void salvar(File file) {
        // Salva o arquivo recebido na mesma pasta do Cliente.jar que está sendo executado
        FileInputStream fileInputStream = null;
        FileOutputStream fileOutputStream = null;
        try {
            fileInputStream = new FileInputStream(file);
            fileOutputStream = new FileOutputStream(new File( "." ).getCanonicalPath() + "\\" + file.getName());
            FileChannel fin = fileInputStream.getChannel();
            FileChannel fout = fileOutputStream.getChannel();
            long size = fin.size();
            fin.transferTo(0, size, fout);
            
            /* Implementação fail de tentar selecionar o local para salvar o arquivo recebido
            JFileChooser chooser = new JFileChooser(); // return false;
            // chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            // chooser.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
            // chooser.setSelectedFile(file);
            // chooser.setDialogTitle("Salve o arquivo");
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileChannel fin = null, fout = null;
            try {
            FileInputStream fileInputStream = new FileInputStream(file);
            FileOutputStream fileOutputStream = new FileOutputStream(chooser.getCurrentDirectory() + file.getName());
            fin = fileInputStream.getChannel();
            fout = fileOutputStream.getChannel();
            
            long size = fin.size();
            fin.transferTo(0, size, fout);
            // fout.transferFrom(fin, 0, size);
            
            // return true;
            } catch (Exception e) {
            e.printStackTrace();
            } finally {
            try {
            fin.close();
            // fout.close();
            } catch (Exception e) {
            e.printStackTrace();
            }
            }
            }
            */
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
                fileOutputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void imprime(File file) {
        // Imprime o conteúdo do arquivo em forma de texto
        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String linha;
            while((linha = bufferedReader.readLine()) != null) {
                this.txtAreaRecieve.append(linha);
            } 
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshOnlines(ChatMessage message) {
        // Atualiza lista de usuários online
        Set<String> names = message.getSetOnlines();
        names.remove((String) message.getName());

        String[] array = (String[]) names.toArray(new String[names.size()]);
        this.listOnlines.setListData(array);
        this.listOnlines.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.listOnlines.setLayoutOrientation(JList.VERTICAL);
    }
    
    private void setIcon() {
        // Seta icone da aplicação cliente (chat)
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }
}
